name: Manual Release from Tag

permissions:
  contents: write # Required to read the repository contents
  id-token: write # Required to create a release

on:
  workflow_dispatch:
    inputs:
      tagName:
        description: "Name of an existing tag from which the release should be done, e.g. v4.26.0"
        required: true
        default: ""
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.tagName }}

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-release-published.yml
      - name: Set up Java for publishing to Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-release-published.yml
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          repositories: |
            [
              {
                "id": "liquibase",
                "url": "https://maven.pkg.github.com/liquibase/liquibase",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "liquibase-pro",
                "url": "https://maven.pkg.github.com/liquibase/liquibase-pro",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "sonatype-nexus-staging",
                "url": "https://oss.sonatype.org/service/local/staging/deploy/maven2/",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "false"
                }
              }
            ]
          servers: |
            [
              {
                "id": "liquibase-pro",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              },
              {
                "id": "liquibase",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              },
              {
                "id": "sonatype-nexus-staging",
                "username": "${{ env.SONATYPE_USERNAME }}",
                "password": "${{ env.SONATYPE_TOKEN }}"
              }
            ]

      - name: Convert escaped newlines and set GPG key
        run: |
          GPG_KEY_CONTENT="$(printf '%b' "${{ env.GPG_SECRET }}")"
          {
            echo "GPG_KEY_CONTENT<<GPG_EOF"
            echo "$GPG_KEY_CONTENT"
            echo
            echo "GPG_EOF"
          } >> $GITHUB_ENV
          GPG_KEY_CONTENT="${GPG_KEY_CONTENT//%/%25}"
          GPG_KEY_CONTENT="${GPG_KEY_CONTENT//$'\r'/%0D}"
          GPG_KEY_CONTENT="${GPG_KEY_CONTENT//$'\n'/%0A}"
          echo "::add-mask::${GPG_KEY_CONTENT}"

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-attach-artifact-release.yml
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ env.GPG_KEY_CONTENT }}
          passphrase: ${{ env.GPG_PASSPHRASE }}

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-attach-artifact-release.yml
      - name: Build release artifacts
        id: build-release-artifacts
        run: ./mvnw -V -B clean verify -DskipTests -Dpmd.skip -Dcpd.skip -Dspotbugs.skip=true -DsignWithMavenGPGPlugin=true

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-attach-artifact-release.yml
      - name: Get Artifact ID and Version
        id: get-artifact-id
        run: |
          echo "artifact_id=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
          echo "artifact_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-attach-artifact-release.yml
      - name: Get release ID and upload url
        id: get-release
        run: |
          releases=$(curl -X GET -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases?per_page=10")
          FOUND_RELEASE_ID=$(echo $releases | jq -r '.[] | select(.name == "${{ inputs.tagName }}") | .id')
          FOUND_UPLOAD_URL=$(echo $releases | jq -r '.[] | select(.name == "${{ inputs.tagName }}") | .upload_url')
          FOUND_UPLOAD_URL="${FOUND_UPLOAD_URL//{?name,label\}}"
          echo "Found Release ID: $FOUND_RELEASE_ID"
          echo "Found Upload URL: $FOUND_UPLOAD_URL"
          echo "RELEASE_ID=$FOUND_RELEASE_ID" >> $GITHUB_ENV
          echo "RELEASE_UPLOAD_URL=$FOUND_UPLOAD_URL" >> $GITHUB_ENV

      - name: List artifacts in release
        if: env.RELEASE_ID != '' && env.RELEASE_ID != null
        id: list-artifacts
        run: |
          RELEASE_ID="${{ env.RELEASE_ID }}"
          ARTIFACTS=$(curl -X GET -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | jq -r '.[].id')
          echo "Artifacts to delete: $ARTIFACTS"
          ARTIFACTS_CLEANED=$(echo "$ARTIFACTS" | tr -s '[:space:]' ',' | sed 's/,$//')
          echo "ARTIFACTS_TO_DELETE=$ARTIFACTS_CLEANED" >> $GITHUB_ENV

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-attach-artifact-release.yml
      - name: Delete artifacts
        if: env.ARTIFACTS_TO_DELETE != null
        run: |
          RELEASE_ID="${{ env.RELEASE_ID }}"
          ARTIFACTS_TO_DELETE="${{ env.ARTIFACTS_TO_DELETE }}"
          IFS=',' read -ra values <<< "$ARTIFACTS_TO_DELETE"
          for value in "${values[@]}"; do
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$value"
            echo "Deleted artifact ID: $value"
          done

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/sign_artifact.sh
      - name: Create checksums
        run: |
          for FILE in target/${{ env.artifact_id }}-${{ env.artifact_version }}*; do
            shasum -b -a 1 "$FILE" | cut -d " " -f 1 > "target/$(basename $FILE).sha1"
            md5sum -b "$FILE" | cut -d " " -f 1 > "target/$(basename $FILE).md5"
          done

      - name: Attach Files to Release
        id: upload-release-asset
        run: |
          files=()
          for FILE in target/${{ env.artifact_id }}-${{ env.artifact_version }}*; do
            files+=($FILE)
          done

          for FILE in ${files[*]}; do
            SIZE=$(stat -c "%s" $FILE)
            if [[ $SIZE -eq 0 ]]; then
              echo "$FILE is empty."
              exit 1;
            fi
            MIME=$(file -b --mime-type $FILE)
            echo "Uploading $FILE (size=$SIZE, mime=$MIME)..."
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Length: $SIZE"\
              -H "Content-Type: $MIME" \
              --data-binary @$FILE "${{ env.RELEASE_UPLOAD_URL }}?name=$(basename $FILE)"
          done

      # taken from https://github.com/liquibase/build-logic/blob/main/.github/workflows/extension-release-published.yml
      - name: Publish to Maven Central
        env:
          MAVEN_USERNAME: ${{ env.SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ env.SONATYPE_TOKEN }}
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          groupId=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)

          # Create Maven repository layout structure for the bundle
          # Convert groupId dots to directory separators
          groupPath=$(echo "$groupId" | tr '.' '/')
          mkdir -p "bundle/${groupPath}/${{ env.artifact_id }}/${version}"

          # Copy all artifacts and their signatures/checksums to proper Maven repository layout
          # Skip files containing "-full" in their names
          for file in target/${{ env.artifact_id }}-${version}*; do
            if [[ ! "$file" == *"-full"* ]]; then
              cp "$file" "bundle/${groupPath}/${{ env.artifact_id }}/${version}/"
            fi
          done

          # Create the bundle zip file
          cd bundle
          zip -r ../central-bundle.zip .
          cd ..

          # Create base64 encoded credentials for Bearer auth
          AUTH_HEADER=$(printf "%s:%s" "${MAVEN_USERNAME}" "${MAVEN_PASSWORD}" | base64 -w 0)

          # Upload bundle to Central Portal using curl with proper authentication
          echo "Uploading bundle to Central Portal..."
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${AUTH_HEADER}" \
            -F "bundle=@central-bundle.zip" \
            "https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC&name=${{ env.artifact_id }}-${version}")

          # Parse response
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          DEPLOYMENT_ID=$(echo "$UPLOAD_RESPONSE" | head -n1)

          echo "HTTP Status: $HTTP_CODE"
          echo "Deployment ID: $DEPLOYMENT_ID"

          if [ "$HTTP_CODE" != "201" ]; then
            echo "Upload failed with HTTP status $HTTP_CODE"
            echo "Response: $DEPLOYMENT_ID"
            exit 1
          fi

          echo "Bundle uploaded successfully to Central Portal"
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Visit https://central.sonatype.com/publishing/deployments to view and publish your deployment"
